/*------------------------------------------------------------------------------

  HEIG-Vd - CoE@SNU              Summer University             August 5-16, 2019

  The Art of Compiler Construction


  suPL scanner skeleton


  @brief snPL scanner definition
  @author Bernhard Egger <bernhard@csap.snu.ac.kr>
  @section changelog Change Log
  2016/07/10 bernhard created
  2019/08/01 bernhard adapted to long ints

  @section license_section License
  Copyright (c) 2016-2019, Computer Systems and Platforms Laboratory, SNU
  All rights reserved.

  Redistribution and use in source and binary forms,  with or without modifi-
  cation, are permitted provided that the following conditions are met:

  - Redistributions of source code must retain the above copyright notice,
    this list of conditions and the following disclaimer.
  - Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,  BUT NOT LIMITED TO,  THE
  IMPLIED WARRANTIES OF MERCHANTABILITY  AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT HOLDER  OR CONTRIBUTORS BE
  LIABLE FOR ANY DIRECT,  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSE-
  QUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF  SUBSTITUTE
  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN  CONTRACT, STRICT
  LIABILITY, OR TORT  (INCLUDING NEGLIGENCE OR OTHERWISE)  ARISING IN ANY WAY
  OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
  DAMAGE.

------------------------------------------------------------------------------*/


%option yylineno

%{
#include "supl.tab.h"       // token definitions and yylval - generated by bison

int yycolumn = 1;

#define YY_USER_ACTION {                            \
  yylloc.first_line = yylloc.last_line = yylineno;  \
  yylloc.first_column = yycolumn;                   \
  yylloc.last_column = yycolumn + yyleng - 1;       \
  yycolumn += yyleng;                               \
}
%}

DIGIT     [0-9]
ALPHA     [A-Za-z_]

%%
"+"                       { return(OPERATOR); } 
"-"                       { return(OPERATOR); } 
"*"                       { return(OPERATOR); } 
"/"                       { return(OPERATOR); } 
"%"                       { return(OPERATOR); } 
"^"                       { return(OPERATOR); } 

"="                       { return(ASSIGN); }

"=="                      { return(COMPARATOR); } 
"<="                      { return(COMPARATOR); } 
">="                      { return(COMPARATOR); } 
">"                       { return(COMPARATOR); }
"<"                       { return(COMPARATOR); }  

"\""                      { return(QUOTES); }  
"\\t"                     { return(STRING); }  
"\\n"                     { return(STRING); }  
"\\\""                    { return(STRING); }  
"\\\\"                    { return(STRING); }  

long                      { return(LONG); }
void                      { return(VOID); }

if                        { return(IF); }
else                      { return(ELSE); }
return                    { return(RETURN); }
while                     { return(WHILE); }
read                      { return(READ); }
write                     { return(WRITE); }
print                     { return(PRINT); }



{ALPHA}({ALPHA}|{DIGIT})* { yylval.str = strdup(yytext); return(IDENT); }
{DIGIT}+                  { yylval.lval = atol(yytext);  return(INTVAL); }

[ \t]+                    // ignore whitespace
[\n]+                     { yycolumn = 1; }           // reset column on newlines
.                         { return(yytext[0]); }

%%


/**
int main( int argc, char **argv )
{
  ++argv, --argc;  // skip over program name
  if ( argc > 0 )
    yyin = fopen( argv[0], "r" );
  else
    yyin = stdin;

  yylex();
}**/


